{
  "name": "github-local-actions",
  "displayName": "GitHub Local Actions",
  "description": "Run your GitHub Actions locally!",
  "icon": "icon.png",
  "author": {
    "name": "Sanjula Ganepola",
    "url": "https://github.com/sanjulaganepola"
  },
  "publisher": "SanjulaGanepola",
  "license": "Apache-2.0",
  "version": "1.1.2",
  "repository": {
    "url": "https://github.com/SanjulaGanepola/github-local-actions"
  },
  "homepage": "https://github.com/SanjulaGanepola/github-local-actions/blob/main/README.md",
  "bugs": {
    "url": "https://github.com/SanjulaGanepola/github-local-actions/issues"
  },
  "keywords": [
    "GitHub Actions",
    "GitHub Actions Workflow",
    "GitHub Local Actions"
  ],
  "categories": [
    "Other"
  ],
  "extensionDependencies": [
    "vscode.git"
  ],
  "engines": {
    "vscode": "^1.93.0"
  },
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "github-local-actions-container",
          "title": "GitHub Local Actions",
          "icon": "$(robot)"
        }
      ]
    },
    "views": {
      "github-local-actions-container": [
        {
          "id": "components",
          "name": "Components",
          "icon": "$(telescope)"
        },
        {
          "id": "workflows",
          "name": "Workflows",
          "icon": "$(layers)"
        },
        {
          "id": "history",
          "name": "History",
          "icon": "$(book)"
        },
        {
          "id": "settings",
          "name": "Settings",
          "icon": "$(gear)"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "components",
        "contents": "Loading components...",
        "when": "!githubLocalActions:noComponents && workspaceFolderCount > 0"
      },
      {
        "view": "components",
        "contents": "No workspace folder opened",
        "when": "workspaceFolderCount == 0"
      },
      {
        "view": "components",
        "contents": "No components found.",
        "when": "githubLocalActions:noComponents && workspaceFolderCount > 0"
      },
      {
        "view": "workflows",
        "contents": "Loading workflows...",
        "when": "!githubLocalActions:noWorkflows && workspaceFolderCount > 0"
      },
      {
        "view": "workflows",
        "contents": "No workspace folder opened",
        "when": "workspaceFolderCount == 0"
      },
      {
        "view": "workflows",
        "contents": "No workflows found.",
        "when": "githubLocalActions:noWorkflows && workspaceFolderCount > 0"
      },
      {
        "view": "history",
        "contents": "Loading history...",
        "when": "!githubLocalActions:noHistory && workspaceFolderCount > 0"
      },
      {
        "view": "history",
        "contents": "No workspace folder opened",
        "when": "workspaceFolderCount == 0"
      },
      {
        "view": "history",
        "contents": "No history found.",
        "when": "githubLocalActions:noHistory && workspaceFolderCount > 0"
      },
      {
        "view": "settings",
        "contents": "Loading settings...",
        "when": "!githubLocalActions:noSettings && workspaceFolderCount > 0"
      },
      {
        "view": "settings",
        "contents": "No workspace folder opened",
        "when": "workspaceFolderCount == 0"
      },
      {
        "view": "settings",
        "contents": "No workflows found.",
        "when": "githubLocalActions:noSettings && workspaceFolderCount > 0"
      }
    ],
    "commands": [
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.refreshComponents",
        "title": "Refresh",
        "icon": "$(refresh)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.information",
        "title": "Information",
        "icon": "$(info)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.installComponent",
        "title": "Install",
        "icon": "$(desktop-download)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.startComponent",
        "title": "Start",
        "icon": "$(debug-start)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.fixPermissions",
        "title": "Fix Permissions",
        "icon": "$(unlock)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.runAllWorkflows",
        "title": "Run All Workflows",
        "enablement": "!githubLocalActions:noWorkflows && workspaceFolderCount > 0",
        "icon": "$(run-all)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.runEvent",
        "title": "Run Event",
        "enablement": "!githubLocalActions:noWorkflows && workspaceFolderCount > 0",
        "icon": "$(symbol-event)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.refreshWorkflows",
        "title": "Refresh",
        "icon": "$(refresh)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.openWorkflow",
        "title": "Open Workflow",
        "icon": "$(go-to-file)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.runWorkflow",
        "title": "Run Workflow",
        "icon": "$(debug-start)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.runJob",
        "title": "Run Job",
        "icon": "$(debug-start)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.clearAll",
        "title": "Clear All",
        "enablement": "!githubLocalActions:noHistory && !githubLocalActions:isRunning && !githubLocalActions:noWorkflows && workspaceFolderCount > 0",
        "icon": "$(clear-all)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.refreshHistory",
        "title": "Refresh",
        "icon": "$(refresh)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.viewOutput",
        "title": "View Output",
        "icon": "$(book)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.restart",
        "title": "Restart",
        "enablement": "viewItem =~ /^githubLocalActions.history_(Success|Failed|Cancelled).*/",
        "icon": "$(debug-restart)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.stop",
        "title": "Stop",
        "enablement": "viewItem =~ /^githubLocalActions.history_(Running).*/",
        "icon": "$(debug-stop)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.remove",
        "title": "Remove",
        "enablement": "viewItem =~ /^githubLocalActions.history_(Success|Failed|Cancelled).*/",
        "icon": "$(close)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.refreshSettings",
        "title": "Refresh",
        "icon": "$(refresh)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.createSecretFile",
        "title": "Create Secret File",
        "icon": "$(add)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.locateSecretFiles",
        "title": "Locate Secret Files",
        "icon": "$(search)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.show",
        "title": "Show",
        "icon": "$(eye)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.hide",
        "title": "Hide",
        "icon": "$(eye-closed)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.createVariableFile",
        "title": "Create Variable File",
        "icon": "$(add)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.locateVariableFiles",
        "title": "Locate Variable Files",
        "icon": "$(search)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.importFromGithub",
        "title": "Import from GitHub",
        "icon": "$(github)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.createInputFile",
        "title": "Create Input File",
        "icon": "$(add)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.locateInputFiles",
        "title": "Locate Input Files",
        "icon": "$(search)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.createPayloadFile",
        "title": "Create Payload File",
        "icon": "$(add)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.locatePayloadFiles",
        "title": "Locate Payload Files",
        "icon": "$(search)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.openSettingFile",
        "title": "Open",
        "icon": "$(go-to-file)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.removeSettingFile",
        "title": "Remove",
        "icon": "$(close)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.deleteSettingFile",
        "title": "Delete",
        "icon": "$(trash)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.editSetting",
        "title": "Edit",
        "icon": "$(edit)"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.viewDocumentation",
        "title": "View Documentation"
      },
      {
        "category": "GitHub Local Actions",
        "command": "githubLocalActions.reportAnIssue",
        "title": "Report an Issue"
      }
    ],
    "submenus": [
      {
        "id": "githubLocalActions.helpAndSupport",
        "label": "Help and Support",
        "icon": "$(question)"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "githubLocalActions.refreshComponents",
          "when": "never"
        },
        {
          "command": "githubLocalActions.information",
          "when": "never"
        },
        {
          "command": "githubLocalActions.installComponent",
          "when": "never"
        },
        {
          "command": "githubLocalActions.startComponent",
          "when": "never"
        },
        {
          "command": "githubLocalActions.fixPermissions",
          "when": "never"
        },
        {
          "command": "githubLocalActions.runAllWorkflows",
          "when": "never"
        },
        {
          "command": "githubLocalActions.runEvent",
          "when": "never"
        },
        {
          "command": "githubLocalActions.refreshWorkflows",
          "when": "never"
        },
        {
          "command": "githubLocalActions.openWorkflow",
          "when": "never"
        },
        {
          "command": "githubLocalActions.runWorkflow",
          "when": "never"
        },
        {
          "command": "githubLocalActions.runJob",
          "when": "never"
        },
        {
          "command": "githubLocalActions.clearAll",
          "when": "never"
        },
        {
          "command": "githubLocalActions.refreshHistory",
          "when": "never"
        },
        {
          "command": "githubLocalActions.viewOutput",
          "when": "never"
        },
        {
          "command": "githubLocalActions.restart",
          "when": "never"
        },
        {
          "command": "githubLocalActions.stop",
          "when": "never"
        },
        {
          "command": "githubLocalActions.remove",
          "when": "never"
        },
        {
          "command": "githubLocalActions.refreshSettings",
          "when": "never"
        },
        {
          "command": "githubLocalActions.createSecretFile",
          "when": "never"
        },
        {
          "command": "githubLocalActions.locateSecretFiles",
          "when": "never"
        },
        {
          "command": "githubLocalActions.show",
          "when": "never"
        },
        {
          "command": "githubLocalActions.hide",
          "when": "never"
        },
        {
          "command": "githubLocalActions.createVariableFile",
          "when": "never"
        },
        {
          "command": "githubLocalActions.locateVariableFiles",
          "when": "never"
        },
        {
          "command": "githubLocalActions.importFromGithub",
          "when": "never"
        },
        {
          "command": "githubLocalActions.createInputFile",
          "when": "never"
        },
        {
          "command": "githubLocalActions.locateInputFiles",
          "when": "never"
        },
        {
          "command": "githubLocalActions.createPayloadFile",
          "when": "never"
        },
        {
          "command": "githubLocalActions.locatePayloadFiles",
          "when": "never"
        },
        {
          "command": "githubLocalActions.openSettingFile",
          "when": "never"
        },
        {
          "command": "githubLocalActions.removeSettingFile",
          "when": "never"
        },
        {
          "command": "githubLocalActions.deleteSettingFile",
          "when": "never"
        },
        {
          "command": "githubLocalActions.editSetting",
          "when": "never"
        },
        {
          "command": "githubLocalActions.viewDocumentation",
          "when": "never"
        },
        {
          "command": "githubLocalActions.reportAnIssue",
          "when": "never"
        }
      ],
      "view/title": [
        {
          "command": "githubLocalActions.refreshComponents",
          "when": "view == components",
          "group": "navigation@99"
        },
        {
          "command": "githubLocalActions.runAllWorkflows",
          "when": "view == workflows && workspaceFolderCount <= 1",
          "group": "navigation@0"
        },
        {
          "command": "githubLocalActions.runEvent",
          "when": "view == workflows && workspaceFolderCount <= 1",
          "group": "navigation@1"
        },
        {
          "command": "githubLocalActions.refreshWorkflows",
          "when": "view == workflows",
          "group": "navigation@99"
        },
        {
          "command": "githubLocalActions.clearAll",
          "when": "view == history && workspaceFolderCount <= 1",
          "group": "navigation@0"
        },
        {
          "command": "githubLocalActions.refreshHistory",
          "when": "view == history",
          "group": "navigation@99"
        },
        {
          "command": "githubLocalActions.refreshSettings",
          "when": "view == settings",
          "group": "navigation@99"
        },
        {
          "submenu": "githubLocalActions.helpAndSupport",
          "when": "view =~ /^(components|workflows|history|settings)$/",
          "group": "navigation@98"
        }
      ],
      "githubLocalActions.helpAndSupport": [
        {
          "command": "githubLocalActions.viewDocumentation",
          "group": "0_more@0"
        },
        {
          "command": "githubLocalActions.reportAnIssue",
          "group": "0_more@1"
        }
      ],
      "view/item/context": [
        {
          "command": "githubLocalActions.information",
          "when": "view == components && viewItem =~ /^githubLocalActions.component.*/",
          "group": "inline@0"
        },
        {
          "command": "githubLocalActions.installComponent",
          "when": "view == components && viewItem =~ /^githubLocalActions.component_(Not Installed|Not Activated).*/",
          "group": "inline@1"
        },
        {
          "command": "githubLocalActions.startComponent",
          "when": "view == components && viewItem =~ /^githubLocalActions.component_Not Running.*/",
          "group": "inline@1"
        },
        {
          "command": "githubLocalActions.fixPermissions",
          "when": "view == components && viewItem =~ /^githubLocalActions.component_Invalid Permissions.*/",
          "group": "inline@1"
        },
        {
          "command": "githubLocalActions.runAllWorkflows",
          "when": "view == workflows && viewItem =~ /^githubLocalActions.workspaceFolderWorkflows.*/ && workspaceFolderCount > 1",
          "group": "inline@0"
        },
        {
          "command": "githubLocalActions.runEvent",
          "when": "view == workflows && viewItem =~ /^githubLocalActions.workspaceFolderWorkflows.*/ && workspaceFolderCount > 1",
          "group": "inline@1"
        },
        {
          "command": "githubLocalActions.openWorkflow",
          "when": "view == workflows && viewItem =~ /^githubLocalActions.workflow.*/",
          "group": "inline@0"
        },
        {
          "command": "githubLocalActions.runWorkflow",
          "when": "view == workflows && viewItem =~ /^githubLocalActions.workflow.*/",
          "group": "inline@1"
        },
        {
          "command": "githubLocalActions.runJob",
          "when": "view == workflows && viewItem =~ /^githubLocalActions.job.*/",
          "group": "inline@0"
        },
        {
          "command": "githubLocalActions.clearAll",
          "when": "view == history && viewItem =~ /^githubLocalActions.workspaceFolderHistory.*/ && workspaceFolderCount > 1",
          "group": "inline@0"
        },
        {
          "command": "githubLocalActions.viewOutput",
          "when": "view == history && viewItem =~ /^githubLocalActions.history.*/",
          "group": "inline@0"
        },
        {
          "command": "githubLocalActions.restart",
          "when": "view == history && viewItem =~ /^githubLocalActions.history.*/",
          "group": "inline@1"
        },
        {
          "command": "githubLocalActions.stop",
          "when": "view == history && viewItem =~ /^githubLocalActions.history.*/",
          "group": "inline@2"
        },
        {
          "command": "githubLocalActions.remove",
          "when": "view == history && viewItem =~ /^githubLocalActions.history.*/",
          "group": "inline@3"
        },
        {
          "command": "githubLocalActions.createSecretFile",
          "when": "view == settings && viewItem =~ /^githubLocalActions.secrets.*/",
          "group": "inline@0"
        },
        {
          "command": "githubLocalActions.locateSecretFiles",
          "when": "view == settings && viewItem =~ /^githubLocalActions.secrets.*/",
          "group": "inline@1"
        },
        {
          "command": "githubLocalActions.show",
          "when": "view == settings && viewItem =~ /^githubLocalActions.secret(?!s)_hide.*/",
          "group": "inline@0"
        },
        {
          "command": "githubLocalActions.hide",
          "when": "view == settings && viewItem =~ /^githubLocalActions.secret(?!s)_show.*/",
          "group": "inline@0"
        },
        {
          "command": "githubLocalActions.createVariableFile",
          "when": "view == settings && viewItem =~ /^githubLocalActions.variables.*/",
          "group": "inline@0"
        },
        {
          "command": "githubLocalActions.locateVariableFiles",
          "when": "view == settings && viewItem =~ /^githubLocalActions.variables.*/",
          "group": "inline@1"
        },
        {
          "command": "githubLocalActions.importFromGithub",
          "when": "view == settings && viewItem =~ /^githubLocalActions.variables.*/",
          "group": "inline@2"
        },
        {
          "command": "githubLocalActions.createInputFile",
          "when": "view == settings && viewItem =~ /^githubLocalActions.inputs.*/",
          "group": "inline@0"
        },
        {
          "command": "githubLocalActions.locateInputFiles",
          "when": "view == settings && viewItem =~ /^githubLocalActions.inputs.*/",
          "group": "inline@1"
        },
        {
          "command": "githubLocalActions.createPayloadFile",
          "when": "view == settings && viewItem =~ /^githubLocalActions.payloads.*/",
          "group": "inline@0"
        },
        {
          "command": "githubLocalActions.locatePayloadFiles",
          "when": "view == settings && viewItem =~ /^githubLocalActions.payloads.*/",
          "group": "inline@1"
        },
        {
          "command": "githubLocalActions.openSettingFile",
          "when": "view == settings && viewItem =~ /^githubLocalActions.(secret|variable|input|payload)File.*/",
          "group": "inline@0"
        },
        {
          "command": "githubLocalActions.removeSettingFile",
          "when": "view == settings && viewItem =~ /^githubLocalActions.(secret|variable|input|payload)File.*/",
          "group": "inline@1"
        },
        {
          "command": "githubLocalActions.deleteSettingFile",
          "when": "view == settings && viewItem =~ /^githubLocalActions.(secret|variable|input|payload)File.*/",
          "group": "inline@2"
        },
        {
          "command": "githubLocalActions.editSetting",
          "when": "view == settings && viewItem =~ /^githubLocalActions.(secret|variable|input|runner)(?!(File|s)).*/",
          "group": "inline@1"
        }
      ]
    },
    "configuration": {
      "title": "GitHub Local Actions",
      "properties": {
        "githubLocalActions.actCommand": {
          "markdownDescription": "The base `nektos/act` command to be called. By default, this will be `act` (requires the binary to be on your `PATH`). If the binary is not on your `PATH`, the command should be fully qualified. If `act` is installed as a GitHub CLI extension, this command should be set to `gh act`.",
          "type": "string",
          "default": "act"
        },
        "githubLocalActions.dockerDesktopPath": {
          "markdownDescription": "The path to your Docker Desktop executable (used for Windows and MacOS). To start Docker Engine from the `Components` view, this application will be launched. Refer to the default path based on OS:\n\n* **Windows**: `C:/Program Files/Docker/Docker/Docker Desktop.exe`\n\n* **MacOS**: `/Applications/Docker.app`",
          "type": "string",
          "default": ""
        },
        "githubLocalActions.act.actionCachePath": {
          "description": "Defines the path where the actions get cached and host workspaces are created.",
          "type": "string",
          "default": ""
        },
        "githubLocalActions.act.actionOfflineMode": {
          "description": "If action contents exists, it will not be fetch and pull again. If turn on this, will turn off force pull.",
          "type": "boolean",
          "default": false
        },
        "githubLocalActions.act.actor": {
          "description": "User that triggered the event.",
          "type": "string",
          "default": "nektos/act"
        },
        "githubLocalActions.act.artifactServerAddr": {
          "markdownDescription": "Defines the address to which the artifact server binds. If not set, `nektos/act` will use the outbound IP address of this machine. This means that it will try to access the internet and return the local IP address of the connection. If the machine cannot access the internet, it returns a preferred IP address from network interfaces. If no IP address is found, this will not be set.",
          "type": "string",
          "default": ""
        },
        "githubLocalActions.act.artifactServerPath": {
          "description": "Defines the path where the artifact server stores uploads and retrieves downloads from. If not specified, the artifact server will not start.",
          "type": "string",
          "default": ""
        },
        "githubLocalActions.act.artifactServerPort": {
          "description": "Defines the port where the artifact server listens.",
          "type": "number",
          "default": 34567
        },
        "githubLocalActions.act.bind": {
          "description": "Bind working directory to container, rather than copy.",
          "type": "boolean",
          "default": false
        },
        "githubLocalActions.act.cacheServerAddr": {
          "markdownDescription": "Defines the address to which the cache server binds. If not set, `nektos/act` will use the outbound IP address of this machine. This means that it will try to access the internet and return the local IP address of the connection. If the machine cannot access the internet, it returns a preferred IP address from network interfaces. If no IP address is found, this will not be set.",
          "type": "string",
          "default": ""
        },
        "githubLocalActions.act.cacheServerPath": {
          "description": "Defines the path where the cache server stores caches.",
          "type": "string",
          "default": ""
        },
        "githubLocalActions.act.cacheServerPort": {
          "markdownDescription": "Defines the port where the artifact server listens. `0` means a randomly available port.",
          "type": "number",
          "default": 0
        },
        "githubLocalActions.act.containerArchitecture": {
          "markdownDescription": "The architecture which should be used to run containers (e.g.: `linux/amd64`). If not specified, the host default architecture will be used. This requires Docker server API Version 1.41+ (ignored on earlier Docker server platforms).",
          "type": "string",
          "default": ""
        },
        "githubLocalActions.act.containerCapAdd": {
          "markdownDescription": "Kernel capabilities to add to the workflow containers (e.g. `SYS_PTRACE`).",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "githubLocalActions.act.containerCapDrop": {
          "markdownDescription": "Kernel capabilities to remove from the workflow containers (e.g. `SYS_PTRACE`).",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "githubLocalActions.act.containerDaemonSocket": {
          "markdownDescription": "URI to Docker Engine socket (e.g.: `unix://~/.docker/run/docker.sock` or `-` to disable bind mounting the socket).",
          "type": "string",
          "default": ""
        },
        "githubLocalActions.act.containerOptions": {
          "description": "Custom docker container options for the job container without an options property in the job definition.",
          "type": "string",
          "default": ""
        },
        "githubLocalActions.act.defaultBranch": {
          "description": "The name of the main branch.",
          "type": "string",
          "default": ""
        },
        "githubLocalActions.act.detectEvent": {
          "description": "Use first event type from workflow as event that triggered the workflow.",
          "type": "boolean",
          "default": false
        },
        "githubLocalActions.act.directory": {
          "markdownDescription": "The working directory used when running a `nektos/act` command.",
          "type": "string",
          "default": "."
        },
        "githubLocalActions.act.githubInstance": {
          "description": "The GitHub instance to use. Only use this when using GitHub Enterprise Server.",
          "type": "string",
          "default": "github.com"
        },
        "githubLocalActions.act.insecureSecrets": {
          "markdownDescription": "Show secrets while printing logs (**NOT RECOMMENDED!**).",
          "type": "boolean",
          "default": false
        },
        "githubLocalActions.act.json": {
          "description": "Output logs in json format.",
          "type": "boolean",
          "default": false
        },
        "githubLocalActions.act.localRepository": {
          "markdownDescription": "Replaces the specified repository and ref with a local folder (e.g. `https://github.com/test/test@v0=/home/act/test` or `test/test@v0=/home/act/test`, the latter matches any hosts or protocols).",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "githubLocalActions.act.logPrefixJobId": {
          "description": "Output the job id within non-json logs instead of the entire name.",
          "type": "boolean",
          "default": false
        },
        "githubLocalActions.act.network": {
          "description": "Sets a docker network name.",
          "type": "string",
          "default": "host"
        },
        "githubLocalActions.act.noCacheServer": {
          "description": "Disable cache server.",
          "type": "boolean",
          "default": false
        },
        "githubLocalActions.act.noRecurse": {
          "markdownDescription": "Flag to disable running workflows from subdirectories of specified path in `--workflows`/`-W` flag.",
          "type": "boolean",
          "default": false
        },
        "githubLocalActions.act.noSkipCheckout": {
          "description": "Do not skip actions/checkout.",
          "type": "boolean",
          "default": false
        },
        "githubLocalActions.act.privileged": {
          "description": "Use privileged mode.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "colors": [
      {
        "id": "GitHubLocalActions.green",
        "description": "Color for green in GitHub Local Actions extension",
        "defaults": {
          "dark": "#89d185",
          "light": "#89d185"
        }
      },
      {
        "id": "GitHubLocalActions.yellow",
        "description": "Color for yellow in GitHub Local Actions extension",
        "defaults": {
          "dark": "#cca700",
          "light": "#cca700"
        }
      },
      {
        "id": "GitHubLocalActions.red",
        "description": "Color for red in GitHub Local Actions extension",
        "defaults": {
          "dark": "#f48771",
          "light": "#f48771"
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "dependencies": {
    "child_process": "^1.0.2",
    "octokit": "^4.0.2",
    "sanitize-filename": "^1.6.3",
    "yaml": "^2.6.0"
  },
  "devDependencies": {
    "@types/node": "22.x",
    "@types/vscode": "^1.93.0",
    "@typescript-eslint/eslint-plugin": "^8.14.0",
    "@typescript-eslint/parser": "^8.14.0",
    "eslint": "^9.15.0",
    "ts-loader": "^9.5.1",
    "typescript": "^5.6.3",
    "webpack": "^5.96.1",
    "webpack-cli": "^5.1.4"
  }
}